import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# PassengerId: Уникальный индекс/номер строки. Начинается с 1 (для первой строки) и увеличивается на 1 для каждой следующей.
# Рассматриваем его как индентификатор строки и, что логично, идентификатор пассжира (т.к. для каждого пассажира в датасете представлена только одна строка).
# Survived: Признак, показывающий был ли спасен данный пассажир или нет. 1 означает, что удалось выжить, и 0 - не удалось спастись.
# Pclass: Класс билета. 1 - означает Первый класс билета. 2 - означает Второй класс билета. 3 - означает Третий класс билета.
# Name: Имя пассажира. Имя также может содержать титулы и обращения. "Mr" для мужчин. "Mrs" для женщин. "Miss" для девушек
# (тут имеется в виду что для тех, кто не замужем, так было принято, да и сейчас тоже, говорить в западном обществе). "Master" для юношей.
# Sex: Пол пассажира. Либо мужчины (=Male) оибо женщины (=Female).
# Age: Возраст пассажира. "NaN" значения в этой колонке означают, что возраст данного пассажира отсутствует/неизвестен/или не был записанv в датасет.
# SibSp: Количество братьев/сестер или супругов, путешествующих с каждым пассажиром.
# Parch: Количество родителей детей (Number of parents of children travelling with each passenger).
# Ticket: Номер билета.
# Fare: Сумма, которую заплатил пассажир за путешествие.
# Cabin: Номер каюты пассажира. "NaN" значения в этой колонке указавает на то, что номер каюты данного пассажира не был записан.
# Embarked: Порт отправления данного пассажира.

# Для отображения всех столбцов
pd.set_option('display.max_columns', None)


train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

print('Кол-во строчек и столбцов', train.shape)

# отобразит различные величины, такие как количесmво, среднее,
# среднеквадратичное отклонение и т.д. для численных типов данных.
print(train.describe())

#  отобразит статистики (descriptive statistics) объектного типа.
#  Это нужно для нечисловых данных, когда нельзя просто посчитать максимумы/среднее/и пр.
#  для данных. Мы можем отнести такие данные к категориальному виду.
print(train.describe(include=['O']))

# Больше информации о типах данных/структуре в тренировочной выборке
# Можно увидеть, что значение Age не задано для большого количества записей.
# Из 891 строк, возраст Age задан лишь для 714 записей.
# Аналогично, Каюты Cabin также пропущены для большого количества записей.
# Только 204 из 891 записей содержат Cabin значения.
print(train.info())

# Всего 177 записей с пропущенным возрастом (Age),
# 687 записей с пропущенным значение каюты Cabin
# и для 2 записей не заданы порты отправления Embarked.
print(train.isnull().sum())





columns_target=["Survived"] #Выжившие
columns_train=['Pclass', 'Sex', 'Age', 'Fare'] #Показатели
y=train[columns_target]
x=train[columns_train]
#
# print('Пропущенных ячеек в классе:', x['Pclass'].isnull().sum())
# print(x['Pclass'][:1])
#
# print('Пропущенных ячеек в поле:', x['Sex'].isnull().sum())
# print(x['Sex'][:1])
#
# print('Пропущенных ячеек в возрасте:', x['Age'].isnull().sum())
# print(x['Age'][:1])
# # Для копирования при записи
# pd.options.mode.copy_on_write = True
# # Пропущенные значения заполнили средними
# x['Age']=x['Age'].fillna(x['Age'].median)
# print('Пропущенных ячеек в возрасте:', x['Age'].isnull().sum(), '\n')
#
# print('Пропущенных ячеек в SibSp:', x['Fare'].isnull().sum())
# print(x['Fare'][:1])
#
# dict_F_M = dict([('female', 0), ('male', 1)])
# # x.flags.writeable = True
# print(x['Sex'][:10])
#
# x['Sex']=x['Sex'].apply(lambda k:dict_F_M[k])
# print(x['Sex'][:10])
#
# from sklearn.model_selection import train_test_split
# x_train, x_test, y_train, y_test = train_test_split(x, y)
# #Метод опорных векторов
# from sklearn import svm
# predmodel = svm.LinearSVC()
# predmodel.fit(x_train,y_train)
#
#
